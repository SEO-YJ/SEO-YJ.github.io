---
layout: post
title:  "Git 중급, 브랜치에 대해 이해해보자"
date:   2022-05-04 17:53:00 +0900
categories: Git알못을 위한 깃린이코스(Git, Github 실습위주) 정리
---
# branch의 이해
## branch를 모를 경우 협업
프로젝트 수정 전, 매번 git pull origin main을 통해 상대방의 업데이트 사항을 합쳐줘야 한다.

## branch를 알 경우 협업
### branch의 아이디어
'그냥 나눠놓고 나중에 한번에 합치자!'

## branch 설명
### main branch
git init을 하고 최초 커밋을 하면, 자동으로 main branch(default branch)가 생성된다.
### 예시
default branch : main   a -> c -> d -> e -> f -> d <\ MERGE
                               \> q -> 1 -> 2 -> 3 </
                               new branch : gitrini
두 개의 공간에서 개발된 코드를 하나의 브랜치로 합치는 것이다.
!!! 이때, 같은 파일의 같은 코드라인을 수정했다면, conflict문제를 해결해 주어야 한다.
TIP. conflict와 같은 문제를 최소화하기 위해, 협업을 할 때는, 파일이 분리되어 있는 경우가 좋다.

### PR
pull request의 약자
합쳐주세요, merge해주세요 라는 요청을 PR이라고 부른다.
PR을 '수락'하면 두 브랜치가 합쳐지면서 merge가 완료된다.

# branch 활용, 실전편 (branch, checkout)
## 혼자서 branch 활용 방법
여러가지 기능을 만들어서,
각 기능이 완성될 때마다 메인 브랜치로 합치는 방식

## git branch 관련 명령어
### git branch
: 현재 생성되어 있는 브랜치의 목록을 볼 수 있는 명령어

### git branch (새로운 브랜치 명)
(새로운 브랜치 명)으로 새로운 브랜치를 만드는 명령어

### git checkout (이동할 브랜치 명)
(이동할 브랜치 명)으로 브랜치를 이동하는 명령어
브랜치가 이동이 되면,
Switched to branch 'gitrini' (브랜치 'gitrini'로 교환되었습니다.)
위와 같은 문구가 뜬다. 

### git push origin (리모트에 보낼 브랜치명)
리모트에 작업한 브랜치의 커밋들을 보내는 명령어

## 깃허브에서 PR 요청 수락하는 방법
1. Compare & pull request (비교 후 merge)
2. Pull requests -> new pull request
base: main <- compare: (main에 넣을 브랜치)
3. create pull request
4. 제목, 어떤 내용을 수정하였는지 적어준다.
5. merge pull request -> confirm merge
6. Pull request successfully merged and closed가 뜬다.
7. 리포지토리 메인 화면으로 오면, SEO-YJ Merge pull request #1 from SEO-YJ/gitrini가 뜨는 것을 확인할 수 있다.

# 협업 하는 방식 - branch로는 어떻게 협업을 하지? (PR, Approve, Comment)
## 주요하게 볼 것
1. 실무에서 어떻게 하는지 볼 것이다.
2. 팀이 PR을 어떻게 Approve하는지 볼 것
3. 팀이 어떻게 코멘트를 남기는지 볼 것
4. 팀원과 협업할 때, 적용해보자.

## branch를 이용한 협업 방법
1. 프로젝트 리포지토리로 이동한다.
2. Settings -> Manage access -> invite a collaborator -> 협업자 초대
3. 협업자는 메일을 승인하면 프로젝트 리포지토리에 접근 권한이 생긴다.
4. 협업자는 git clone (프로젝트 리포지토리 주소)를 통해, 본인 로컬에 프로젝트를 가져온다.
5. 처음에 'git status'를 통해, 가져온 리포지토리가 어떤 브랜치에 있는지 확인한다.
On branch main
Your branch is up to date with 'origin/main'.
위와 같은 문구를 확인하고, '아 지금 main 브랜치 위에 있구나' 라고 생각하면 된다.
(git branch로도 확인 가능하다.)
6. git branch gitrini (gitrini라는 브랜치 생성), git checkout gitrini(gitrini라는 브랜치로 이동)
7. gitrini 브랜치에서 작업 후, git push origin gitrini로 리모트에 푸시를 해준다.
8. push 후 협업자 깃허브로 들어가보면, Compare & pull request 요청이 뜰 것이다. 
이에 대한, 제목, 수정 사항을 입력 후 create pull request로 본 계정에 merge를 요청한다.
(원래는 권한이 있으면 바로 merge를 해줄 수 있다. 그러나 팀끼리 '몇 명 이상이 동의'를 했을 경우 merge를 할 수 있다.
등의 규칙을 정한다.)
9. 본 계정의 프로젝트 메인화면으로가면 Pull requests가 뜬 것을 확인할 수 있다.
10. 파일 뭐 바꿨지? Files changed 등으로 수정사항을 확인해 본다.
11. Files changed -> Review changes에서 '코멘트'를 남길 수 있다.
12. Files changed -> Review changes -> approve를 통해 '수락'을 누를 수 있다.
그러면, Changes approved -> 1 approved ( 1명이 수락했습니다.)를 확인할 수 있다.
13. approve의 수를 보고, 팀원들의 동의가 이루어지면 merge를 누른다. 등으로
팀원끼리 규칙을 세워서 진행한다.
14. 코드리뷰를 하는 방식으로 프로젝트를 진행해보자.

## 지금까지 배운 명령어 정리
### git --version
: 현재 로컬에 설치된 git 버전관리 툴의 버전을 확인할 수 있는 명령어

### git config --global init.defaultBranch main
: git의 root 브랜치가 master -> main으로 변경되었으므로,
main으로 초기에 세팅해주는 명령어
1회만 명령해주면 된다.

### git config --global user.name "YUJUN SEO"
: 현재 로컬의 git의 이름을 환경 설정 해주는 명령어

### git config --global user.email "yujun@~"
: 현재 로컬의 git의 이메일을 환경 설정 해주는 명령어

### git config --list
: 환경 설정 세팅을 확인하는 명령어

### git init
: 폴더 안에 git 파일을 넣어 git으로 관리해주는 명령어
(사진사 고용)
* 강의 자료
1) .git 폴더 생성
2) .git 폴더가 생성된 폴더는 git이 관리하기 시작함

### git add .
: 현재까지 수행한 저장된 파일들을 임시의 공간에 '모두' 저장하는 명령어
( 사진에 찍힐 사람들을 한꺼번에 모으는 명령어)
* 강의 자료
1) 모든 파일 스테이징 (말이 어렵지만 '추적'을 시작한다라고 보면 된다.)

### git add <file명>
: 현재까지 수행한 저장된 파일 중 '특정 파일'을 임시의 공간에 저장하는 명령어
( 사진에 찍힐 사람들 중 특정 사람들을 골라 모으는 명령어)

### git commit -m "message"
: git add를 통해 임시로 저장된 파일들을 버전으로 관리하여 저장하는 명령어
( 사진의 이름, 저장된 파일들, 로컬에 저장된 환경 상태, 날짜 등을 확인 가능)
* 강의 자료
1) message 이름으로 현재 추적하고 있는 코드들을 '찰칵'

### git log
: 현재까지 git commit 명령어로 버전 관리된 파일들을 리스트로 확인하는 명령어
( 앨범)
* 강의 자료
1) 커밋 로그를 확인

### git status
: 프로젝트 내부의 파일들이 '임시의 공간'에 저장되었는지 확인하는 명령어
* 강의 자료
1) 현재 git의 상태를 보여줌

### git rm --cached <file>
: git add 명령어를 통해 임시의 공간에 저장된 파일들 중, 
특정 파일을 선택해 임시의 공간에서 제거하는 명령어
(너 나와봐!)

### git restore
: git add를 통해 임시의 공간에 파일을 저장해 놓았는데,
저장한 파일을 수정하였다가 다시 add를 명령했던 상태로 돌아가고 싶을 때, 사용하는 명령어

### git reset --hard 커밋해쉬코드(번호)
: 이전 commit으로 되돌리고 싶을때 사용하는 명령어
* 강의 자료
1) 커밋 번호에 해당하는 커밋으로 코드를 롤백

### git reset --hard
: commit을 한 후에, 파일들을 수정하던 중 다시 이전 'commit'의 상태로 파일들을 되돌리고 싶을 때 사용하는 명령어

### git remote add origin https://github.com/.... 
라는 명령어를 명령해주면 된다.
git remote add origin (주소)
주소 부분은 Quick setup -- if you've done this kind of thing before
의 HTTPS 부분의 주소를 복사해서 넣어줘도 된다.
3. 리모트에 로컬의 커밋한 내용들을 보내고 싶을 때 사용하는 명령어

### git push origin main
4. commit을 확인해보고 싶으면, commits 부분을 확인하면 된다.

### git clone 레포지토리주소
리모트에 있는 레포지토리 파일들을 복사해서 가져올 수 있다.

### git pull origin main
서버 자체에서 변경이 일어났을 때 가져오는 방법
ex> Add readme

### git reset --hard 커밋해쉬코드(번호)
이전 커밋으로 돌아가는 것도 가능하고,
다시 앞의 커밋으로 되돌리는 것도 가능하다.

