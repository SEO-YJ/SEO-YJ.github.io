---
layout: post
title:  "첫 과제, 익숙해지는 것이 중요합니다"
date:   2022-05-03 17:14:00 +0900
categories: Git알못을 위한 깃린이코스(Git, Github 실습위주) 정리
---
# 개인프로젝트도 Github에 저장하자!
## 개인 프로젝트도 GitHub에 저장하자!
### Git, Github의 사용이 필요한 사람들
1. 로컬 컴퓨터가 망가졌을 경우
2. 2대 이상의 컴퓨터에서 한 프로젝트를 관리하고 싶을 경우
3. usb, 구글 드라이브에 코드를 옮겨다니며 프로젝트를 진행한 경우

## Push & Pull 그리고 Clone
### add
프로젝트의 파일들을 모으는 명령
### commit
모은 파일들을 사진찍는 것
### push 
리모트 서버(GitHub)에 저장하는 것
### clone
맨 처음, 리모트 서버의 레포지토리 프로젝트를 로컬에 가져오는 것
### pull
clone한 프로젝트를 리모트 서버에서 로컬에 가져오는 것

### 앞으로의 수업에서 배울 것
1. GitHub를 섹시하게 사용하는 방법
2. GitHub로 다른 사람과 협업하는 방법

# 첫번째 과제! 본인의 프로젝트를 GitHub에 올려보세요
### private 설정
프로젝트를 나만 보고 싶을 경우 설정

### .gitignore
프로젝트에서 올리고 싶지 않은 파일이 있을 경우

# 프로젝트를 깃허브에 올리는 법 그리고 .gitignore(꼭 과제를 다하고 보세요.)
## 2가지 방법
### 방법 1
1. 로컬에 프로젝트 폴더 생성
2. git init(사진사 고용)
3. git add .(임시 저장공간에 파일 모아서 저장)
4. git commit -m " " (사진 찍기)
5. 깃 허브에 레포지토리 생성하기
6. git remote add origin (HTTPS 주소) (리모트 서버에 연결하기)
7. git push origin main (리모트 서버에 보내어 저장하기)

### 방법 2 (따로 git init(사진사 고용)을 하지 않아도 되는 방법)
1. 깃허브에 리포지토리를 먼저 만들기
2. 빈 리포지토리를 clone ( git clone 주소 )
3. 빈 리포지토리를 clone 받으면, .git 파일이 내부에 포함됨을 확인할 수 있다.
4. 이미 로컬에서 진행중인 프로젝트를 복사해서 clone 받은 폴더에 넣어준다.

### .gitignore 파일
로컬의 프로젝트 폴더 내부의 파일들 중, 리모트 서버에 올리고 싶지 않은 파일이 있는 경우에 사용

1. 프로젝트 폴더 내부에 "gitignore"라는 텍스트 파일을 생성한다.

*.exe
*는 모든 파일을 의미한다.
내부에 *.exe 파일을 작성한다.
그러면, git status로 add가 안된 파일들을 확인해보면
확장자가 .exe인 파일들은 나타나지 않는다.

정리
.gitignore 파일의 내부에 올리고 싶지 않은 파일들을 작성하면,
git 관련 명령어에 파일을 포함시키지 않을 수 있다.

### 맥북에서는 어떻게 사용할까?
1. sudo touch .gitignore
2. gitignore.io 홈페이지에서 프로젝트 관련 값 넣어주기
3. 쓰기권한 관련 이슈 발생할 경우 "공유 및 사용 권한"

관련 링크
https://0urtrees.tistory.com/38


### 방법 1과 다른 점
1. git remote add origin 작업 대신에, git clone을 명령한다.


## 지금까지 배운 명령어 정리
### git --version
: 현재 로컬에 설치된 git 버전관리 툴의 버전을 확인할 수 있는 명령어

### git config --global init.defaultBranch main
: git의 root 브랜치가 master -> main으로 변경되었으므로,
main으로 초기에 세팅해주는 명령어
1회만 명령해주면 된다.

### git config --global user.name "YUJUN SEO"
: 현재 로컬의 git의 이름을 환경 설정 해주는 명령어

### git config --global user.email "yujun@~"
: 현재 로컬의 git의 이메일을 환경 설정 해주는 명령어

### git config --list
: 환경 설정 세팅을 확인하는 명령어

### git init
: 폴더 안에 git 파일을 넣어 git으로 관리해주는 명령어
(사진사 고용)
* 강의 자료
1) .git 폴더 생성
2) .git 폴더가 생성된 폴더는 git이 관리하기 시작함

### git add .
: 현재까지 수행한 저장된 파일들을 임시의 공간에 '모두' 저장하는 명령어
( 사진에 찍힐 사람들을 한꺼번에 모으는 명령어)
* 강의 자료
1) 모든 파일 스테이징 (말이 어렵지만 '추적'을 시작한다라고 보면 된다.)

### git add <file명>
: 현재까지 수행한 저장된 파일 중 '특정 파일'을 임시의 공간에 저장하는 명령어
( 사진에 찍힐 사람들 중 특정 사람들을 골라 모으는 명령어)

### git commit -m "message"
: git add를 통해 임시로 저장된 파일들을 버전으로 관리하여 저장하는 명령어
( 사진의 이름, 저장된 파일들, 로컬에 저장된 환경 상태, 날짜 등을 확인 가능)
* 강의 자료
1) message 이름으로 현재 추적하고 있는 코드들을 '찰칵'

### git log
: 현재까지 git commit 명령어로 버전 관리된 파일들을 리스트로 확인하는 명령어
( 앨범)
* 강의 자료
1) 커밋 로그를 확인

### git status
: 프로젝트 내부의 파일들이 '임시의 공간'에 저장되었는지 확인하는 명령어
* 강의 자료
1) 현재 git의 상태를 보여줌

### git rm --cached <file>
: git add 명령어를 통해 임시의 공간에 저장된 파일들 중, 
특정 파일을 선택해 임시의 공간에서 제거하는 명령어
(너 나와봐!)

### git restore
: git add를 통해 임시의 공간에 파일을 저장해 놓았는데,
저장한 파일을 수정하였다가 다시 add를 명령했던 상태로 돌아가고 싶을 때, 사용하는 명령어

### git reset --hard 커밋해쉬코드(번호)
: 이전 commit으로 되돌리고 싶을때 사용하는 명령어
* 강의 자료
1) 커밋 번호에 해당하는 커밋으로 코드를 롤백

### git reset --hard
: commit을 한 후에, 파일들을 수정하던 중 다시 이전 'commit'의 상태로 파일들을 되돌리고 싶을 때 사용하는 명령어

### git remote add origin https://github.com/.... 
라는 명령어를 명령해주면 된다.
git remote add origin (주소)
주소 부분은 Quick setup -- if you've done this kind of thing before
의 HTTPS 부분의 주소를 복사해서 넣어줘도 된다.
3. 리모트에 로컬의 커밋한 내용들을 보내고 싶을 때 사용하는 명령어

### git push origin main
4. commit을 확인해보고 싶으면, commits 부분을 확인하면 된다.

### git clone 레포지토리주소
리모트에 있는 레포지토리 파일들을 복사해서 가져올 수 있다.

### git pull origin main
서버 자체에서 변경이 일어났을 때 가져오는 방법
ex> Add readme

### git reset --hard 커밋해쉬코드(번호)
이전 커밋으로 돌아가는 것도 가능하고,
다시 앞의 커밋으로 되돌리는 것도 가능하다.

